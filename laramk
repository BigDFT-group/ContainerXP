#!/bin/sh
ORIGIN=$(dirname $(readlink -f $0))
. "$ORIGIN/container_base.sh"

uniopt SOURCEDIR s sources "\${BIGDFT_SUITE_SOURCES}"  "Source directory (value of BIGDFT_SUITE_SOURCES) "
uniopt BINARIES b binaries "\${BIGDFT_SUITE_BINARIES}" "Binaries directory (value of BIGDFT_SUITE_BINARIES, created if absent)"
uniopt LARASOURCE l sources "\${LARA_SOURCES}"  "Source directory (value of LARA_SOURCES) "
uniopt CONTAINER i image "lara/sdk:latest" "SDK Container image to deploy"
uniopt ONTOFLOWSOURCE o ontoflow "\${ONTOFLOW_SOURCES}" "sources of ontoflow (value of ONTOFLOW_SOURCES)"
uniopt KEYSDIR a apikeysdir "\${HOME}/.lara" "Directory of API keys, created if absent"
uniopt PORT p port "" "Port to which redirect the 8888 port of the container"

parse_base $@

if test x"$PORT" = x; then
   DOCKER_OPTIONS="$DOCKER_OPTIONS --network=host"
else
   DOCKER_OPTIONS="$DOCKER_OPTIONS -p $PORT:8888"
fi

if test x"$SOURCEDIR" != x; then
   SRC=$(get_abspath $SOURCEDIR)
   DOCKER_OPTIONS="$DOCKER_OPTIONS -v $SRC:/opt/bigdft/sources/"
fi

if test x"$BINARIES" != x; then
   BIN=$(get_abspath $BINARIES)
   mkdir -p $BIN
   DOCKER_OPTIONS="$DOCKER_OPTIONS -v $BIN:$TARGET"
fi

if test x"$LARASOURCE" != x; then
   LSRC=$(get_abspath $LARASOURCE)
   DOCKER_OPTIONS="$DOCKER_OPTIONS -v $LSRC:/opt/lara-hpc"
fi

if test x"$ONTOFLOWSOURCE" != x; then
   OSRC=$(get_abspath $ONTOFLOWSOURCE)
   DOCKER_OPTIONS="$DOCKER_OPTIONS -v $OSRC:/opt/ontoflow"
fi

if test x"$KEYSDIR" != x; then
   KDIR=$(get_abspath $KEYSDIR)
   mkdir -p $KDIR
   DOCKER_OPTIONS="$DOCKER_OPTIONS -v $KDIR:/opt/keys"
fi

docker_command
