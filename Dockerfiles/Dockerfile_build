#
# This Dockerfile builds bigdft from sources with GPU support
#
#

#build stage : heavy image, will be discarded after build 
FROM bigdft/sdk:cuda8 as builder
LABEL maintainer bigdft-developers@lists.launchpad.net 


#get bigdft and compile it
USER root
WORKDIR /opt/
RUN rm -rf /opt/bigdft
RUN bzr branch -Ossl.cert_reqs=none lp:bigdft
RUN chmod -R 777 /opt/bigdft
RUN mkdir /usr/local/bigdft && chmod -R 777 /usr/local/bigdft

#build with openmpi
WORKDIR /opt/bigdft/build
RUN chmod -R 777 /opt/bigdft/build
RUN cp /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/lib/libcuda.so.1

USER bigdft
ENV LD_LIBRARY_PATH "/usr/local/lib:${LD_LIBRARY_PATH}"

RUN echo "prefix='/usr/local/bigdft' " > ./buildrc && cat ../rcfiles/container.rc >> buildrc

RUN ../Installer.py autogen -y
RUN ls /usr/local/
RUN ../Installer.py build -y -a babel -v

RUN ls /usr/local/bigdft/bin/bigdft


#build with mvapich
USER root
RUN mkdir /var/lib/apt/lists/ && mkdir /var/lib/apt/lists/partial \
    && apt-get update && \
    apt-get install -y --no-install-recommends \
        libibverbs-dev libibverbs1 libibcm1 \
        librdmacm1 librdmacm-dev rdmacm-utils \
        byacc libmlx5-1 libgomp1 libibmad5 \
        libibumad3 infiniband-diags \
        opensm libmlx5-dev perftest ibverbs-utils \
        alien python3-dev\
        && rm -rf /var/lib/apt/lists/

WORKDIR /tmp
RUN curl -O http://mvapich.cse.ohio-state.edu/download/mvapich/gdr/2.2/stock2/mvapich2-gdr-2.2-4.cuda8.0.stock.gnu4.8.5.el7.centos.x86_64.rpm && alien -c *.rpm && mkdir /usr/local/mvapich && dpkg --install *.deb && rm -f *.rpm *.deb
RUN cp -r /opt/mvapich2/gdr/no-mcast/2.2/cuda8.0/mpirun/gnu4.8.5/* /usr/local/mvapich

#mvapich needs bash
RUN ln -s /bin/bash /usr/bin/bash
SHELL ["/bin/bash", "-c"]
ENV SHELL /bin/bash

RUN echo "/usr/local/mvapich/lib" > /etc/ld.so.conf.d/mpi.conf
RUN ldconfig
ENV PATH "/bigdft/bin:/usr/local/mvapich/bin:${PATH}"


WORKDIR /opt/bigdft/build_mvapich2
RUN chmod -R 777 /opt/bigdft/build_mvapich2
RUN mkdir /usr/local/bigdft_mvapich2 && chmod -R 777 /usr/local/bigdft_mvapich2

RUN cp /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/local/lib/libnvidia-ml.so.1

USER bigdft
ENV LD_LIBRARY_PATH "/usr/local/lib:${LD_LIBRARY_PATH}"

RUN echo "prefix='/usr/local/bigdft_mvapich2' " > ./buildrc && cat ../rcfiles/container.rc >> buildrc

RUN ../Installer.py autogen -y
RUN rm -rf /opt/bigdft/build_mvapich2/* && echo "graou5"

RUN echo "prefix='/usr/local/bigdft_mvapich2' " > ./buildrc && cat ../rcfiles/container.rc >> buildrc
RUN ../Installer.py build -y -a babel -v

RUN ls /usr/local/bigdft_mvapich2/bin/bigdft


#second stage : smaller image without sources with mvapich2
FROM nvidia/cuda:8.0-runtime-ubuntu16.04 as runtime_mvapich

SHELL ["/bin/bash", "-c"]
ENV SHELL /bin/bash
#install only runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ocl-icd-libopencl1 libblas3 liblapack3 \
        libibverbs1 libibcm1 librdmacm1 \
        libgomp1 rdmacm-utils libibmad5 \
        byacc libibumad3 infiniband-diags \
        libmlx5-1 perftest ibverbs-utils \
        opensm flex python-pip python-dev \
        ipython ipython-notebook python-setuptools \
        build-essential libpcre3 python-matplotlib \
        && rm -rf /var/lib/apt/lists/

#install jupyter

#upgrade pip to avoid annoying message
RUN pip install --upgrade pip && \ 
    pip install jupyter


RUN mkdir -p /etc/OpenCL/vendors && \
    echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility


#copy stub from libcuda to see if it works (without gpu) on systems without nvidia-docker or nvidia driver
COPY --from=builder /usr/local/cuda/targets/x86_64-linux/lib/stubs/libcuda.so /usr/local/lib/libcuda.so.1
COPY --from=builder /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/local/lib/libnvidia-ml.so.1
COPY --from=builder /usr/local/mvapich /usr/local/mpi
COPY --from=builder /usr/local/bigdft_mvapich2 /usr/local/bigdft


#update ldconfig as /usr/local/lib may not be in the path
RUN echo "/usr/local/mpi/lib64" > /etc/ld.so.conf.d/mpi.conf
RUN echo "/usr/local/bigdft/lib" > /etc/ld.so.conf.d/bigdft.conf
RUN ldconfig
ENV PATH "/usr/local/bigdft/bin:/usr/local/mpi/bin:${PATH}"
ENV LD_LIBRARY_PATH "/usr/local/bigdft/lib:${LD_LIBRARY_PATH}"
ENV PYTHONPATH "/usr/local/bigdft/lib/python2.7/site-packages:${PYTHONPATH}"
ENV PKG_CONFIG_PATH "/usr/local/bigdft/lib/pkgconfig:${PKG_CONFIG_PATH}"
ENV CHESS_ROOT "/usr/local/bigdft/bin:${CHESS_ROOT}"
ENV BIGDFT_ROOT "/usr/local/bigdft/bin:${BIGDFT_ROOT}"
ENV GI_TYPELIB_PATH "/usr/local/bigdft/lib/girepository-1.0:${GI_TYPELIB_PATH}"


#disable gdrcopy lib (should we build it ?)
ENV MV2_USE_GPUDIRECT_GDRCOPY 0
ENV MV2_SMP_USE_CMA 0
#ENV MV2_USE_CUDA 1
#ENV MV2_USE_GPUDIRECT 1
ENV MV2_ENABLE_AFFINITY 0
ENV MV2_CPU_BINDING_POLICY scatter
ENV MV2_CPU_BINDING_LEVEL socket


# Import matplotlib the first time to build the font cache. 
ENV XDG_CACHE_HOME /root/.cache/ 
RUN MPLBACKEND=Agg python -c "import matplotlib.pyplot"

EXPOSE 8888
CMD jupyter-notebook --ip=0.0.0.0 --allow-root --NotebookApp.token=bigdft --no-browser

RUN apt-get remove -y --purge build-essential\
                           python-setuptools && \
    apt-get clean && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/

#As of 14/03/18, shifter has a bug with non-ascii characters in files
RUN rm -rf $(find / | perl -ne 'print if /[^[:ascii:]]/')
    
RUN useradd -ms /bin/bash bigdft
USER bigdft
ENV XDG_CACHE_HOME /home/bigdft/.cache/ 
RUN MPLBACKEND=Agg python -c "import matplotlib.pyplot"



    
#another one with openmpi
FROM nvidia/cuda:8.0-runtime-ubuntu16.04 as runtime_openmpi

SHELL ["/bin/bash", "-c"]
ENV SHELL /bin/bash
#install only runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ocl-icd-libopencl1 libblas3 liblapack3 \
        opensm flex python-pip python-dev \
        ipython ipython-notebook python-setuptools \
        build-essential libpcre3 python-matplotlib ssh\
        && rm -rf /var/lib/apt/lists/

#install jupyter

#upgrade pip to avoid annoying message
RUN pip install --upgrade pip && \ 
    pip install jupyter


RUN mkdir -p /etc/OpenCL/vendors && \
    echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility

#copy stub from libcuda to see if it works (without gpu) on systems without nvidia-docker or nvidia driver
COPY --from=builder /usr/local/cuda/targets/x86_64-linux/lib/stubs/libcuda.so /usr/local/lib/libcuda.so.1

COPY --from=builder /usr/local/mpi /usr/local/mpi
COPY --from=builder /usr/local/bigdft /usr/local/bigdft


#update ldconfig as /usr/local/lib may not be in the path
RUN echo "/usr/local/mpi/lib" > /etc/ld.so.conf.d/mpi.conf
RUN echo "/usr/local/bigdft/lib" > /etc/ld.so.conf.d/bigdft.conf
RUN ldconfig
ENV PATH "/usr/local/bigdft/bin:/usr/local/mpi/bin:${PATH}"
ENV LD_LIBRARY_PATH "/usr/local/bigdft/lib:${LD_LIBRARY_PATH}"
ENV PYTHONPATH "/usr/local/bigdft/lib/python2.7/site-packages:${PYTHONPATH}"
ENV PKG_CONFIG_PATH "/usr/local/bigdft/lib/pkgconfig:${PKG_CONFIG_PATH}"
ENV CHESS_ROOT "/usr/local/bigdft/bin:${CHESS_ROOT}"
ENV BIGDFT_ROOT "/usr/local/bigdft/bin:${BIGDFT_ROOT}"
ENV GI_TYPELIB_PATH "/usr/local/bigdft/lib/girepository-1.0:${GI_TYPELIB_PATH}"


# Import matplotlib the first time to build the font cache. 
ENV XDG_CACHE_HOME /root/.cache/ 
RUN MPLBACKEND=Agg python -c "import matplotlib.pyplot"

EXPOSE 8888
CMD jupyter-notebook --ip=0.0.0.0 --allow-root --NotebookApp.token=bigdft --no-browser

RUN apt-get remove -y --purge build-essential\
                           python-setuptools && \
    apt-get clean && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/

RUN useradd -ms /bin/bash bigdft
USER bigdft
ENV XDG_CACHE_HOME /home/bigdft/.cache/ 
RUN MPLBACKEND=Agg python -c "import matplotlib.pyplot"

