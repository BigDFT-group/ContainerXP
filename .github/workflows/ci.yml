name: continuous-integration
on: [workflow_dispatch]
jobs:
    generate:
        runs-on: ubuntu-20.04
        steps:
        -   uses: actions/checkout@v2
        -   name: Cache python dependencies
            id: cache-pip
            uses: actions/cache@v1
            with:
                path: ~/.cache/pip
                key: pip-pre-commit-${{ hashFiles('**/setup.json') }}
                restore-keys:
                    pip-pre-commit-
        -   name: Set up Python
            uses: actions/setup-python@v1
            with:
                python-version: 3.8
        -   name: Install python dependencies
            run:
                pip install hpccm
        -   name: Get the tag
            id: vars
            run: |
               source current_setup.sh 
               echo ::set-output name=tag::$(echo ubuntu${BIGDFT_UBUNTU_VERSION}_cuda${BIGDFT_CUDA_VERSION}_ompi${BIGDFT_OPENMPI_VERSION}_${GITHUB_REF##*/})
        -   name: generate docker files for openmpi
            run: |
                source current_setup.sh
                hpccm --recipe hpccm/hpccm_lsim-mpi.py --userarg cuda=${BIGDFT_CUDA_VERSION} ubuntu=${BIGDFT_UBUNTU_VERSION} mpi="ompi" mpi_version=${BIGDFT_OPENMPI_VERSION} > Dockerfile_sdk
                hpccm --recipe hpccm/hpccm_lsim-vsim.py --userarg cuda=${BIGDFT_CUDA_VERSION} ubuntu=${BIGDFT_UBUNTU_VERSION} mpi="ompi" mpi_version=${BIGDFT_OPENMPI_VERSION} tag="degomme/bigdft_sdk:${{steps.vars.outputs.tag}}" > Dockerfile_vsim
                hpccm --recipe hpccm/hpccm_lsim-bigdft.py --userarg cuda=${BIGDFT_CUDA_VERSION} ubuntu=${BIGDFT_UBUNTU_VERSION} mpi="ompi" mpi_version=${BIGDFT_OPENMPI_VERSION} tag="degomme/bigdft_sdk:${{steps.vars.outputs.tag}}" > Dockerfile_runtime
        -   name: Upload sdk dockerfile
            uses: actions/upload-artifact@v1
            with:
                name: dockerfile_sdk
                path: Dockerfile_sdk
        -   name: Upload vsim dockerfile
            uses: actions/upload-artifact@v1
            with:
                name: dockerfile_vsim
                path: Dockerfile_vsim
        -   name: Upload runtime dockerfile
            uses: actions/upload-artifact@v1
            with:
                name: dockerfile_runtime
                path: Dockerfile_runtime
    build_sdk:
        runs-on: ubuntu-latest
        needs: generate
        steps:
        -   uses: actions/checkout@v2
        -   name: Download dockerfile
            uses: actions/download-artifact@v1
            with:
                name: dockerfile_sdk
        -   name: Login to DockerHub Registry
            run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        -   name: Get the version
            id: vars
            run: |
               source current_setup.sh 
               echo ::set-output name=tag::$(echo ubuntu${BIGDFT_UBUNTU_VERSION}_cuda${BIGDFT_CUDA_VERSION}_ompi${BIGDFT_OPENMPI_VERSION}_${GITHUB_REF##*/})
        -   name: Build the tagged Docker image
            run: docker build . --file dockerfile_sdk/Dockerfile_sdk --tag degomme/bigdft_sdk:${{steps.vars.outputs.tag}} --tag degomme/bigdft_sdk:latest
        -   name: Push the tagged Docker image
            run: docker push degomme/bigdft_sdk:${{steps.vars.outputs.tag}}
    build_vsim:
        runs-on: ubuntu-latest
        needs: build_sdk
        steps:
        -   uses: actions/checkout@v2
        -   name: Download dockerfile
            uses: actions/download-artifact@v1
            with:
                name: dockerfile_vsim
        -   name: Login to DockerHub Registry
            run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        -   name: Get the version
            id: vars
            run: |
               source current_setup.sh 
               echo ::set-output name=tag::$(echo ubuntu${BIGDFT_UBUNTU_VERSION}_cuda${BIGDFT_CUDA_VERSION}_ompi${BIGDFT_OPENMPI_VERSION}_${GITHUB_REF##*/})
        -   name: Build the tagged Docker image
            run: docker build . --file dockerfile_vsim/Dockerfile_vsim --tag degomme/bigdft_vsim:${{steps.vars.outputs.tag}} --tag degomme/bigdft_vsim:latest
        -   name: Push the tagged Docker image
            run: docker push degomme/bigdft_vsim:${{steps.vars.outputs.tag}}
    build_runtime:
        runs-on: ubuntu-latest
        needs: build_sdk
        steps:
        -   uses: actions/checkout@v2
        -   name: Download dockerfile
            uses: actions/download-artifact@v1
            with:
                name: dockerfile_runtime
        -   name: Login to DockerHub Registry
            run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        -   name: Get the version
            id: vars
            run: |
               source current_setup.sh 
               echo ::set-output name=tag::$(echo ubuntu${BIGDFT_UBUNTU_VERSION}_cuda${BIGDFT_CUDA_VERSION}_ompi${BIGDFT_OPENMPI_VERSION}_${GITHUB_REF##*/})
        -   name: Build the tagged Docker image
            run: docker build . --file dockerfile_runtime/Dockerfile_runtime --tag degomme/bigdft_runtime:${{steps.vars.outputs.tag}} --tag degomme/bigdft_runtime:latest
        -   name: Test Fehyb OMP
            working-directory: FeHyb/NOGPU
            run: |
                chmod -R 777 .
                docker run -v $PWD:/results -w /results degomme/bigdft_runtime:${{steps.vars.outputs.tag}} bigdft
        -   name: Upload logfile
            uses: actions/upload-artifact@v1
            with:
                name: log-omp
                path: FeHyb/NOGPU/log.yaml
        -   name: Test Fehyb MPI
            working-directory: FeHyb/NOGPU
            run: |
                docker run -v $PWD:/results -w /results -e OMP_NUM_THREADS=1 degomme/bigdft_runtime:${{steps.vars.outputs.tag}} mpirun -np 2 bigdft
        -   name: Upload logfile
            uses: actions/upload-artifact@v1
            with:
                name: log-mpi
                path: FeHyb/NOGPU/log.yaml        
        -   name: Push the tagged Docker image
            run: docker push degomme/bigdft_runtime:${{steps.vars.outputs.tag}}
